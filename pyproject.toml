[build-system]
requires = ['flit_core>=3.4,<4']
build-backend = 'flit_core.buildapi'

[project]
name = 'aiida-restapi'
dynamic = ['description', 'version']
authors = [
    {name = 'The AiiDA Team', email = 'developers@aiida.net'}
]
readme = 'README.md'
license = {file = 'LICENSE.txt'}
classifiers = [
    'Development Status :: 3 - Alpha',
    'Framework :: AiiDA',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Topic :: Scientific/Engineering'
]
keywords = ['aiida', 'workflows']
requires-python = '>=3.9'
dependencies = [
    'aiida-core~=2.0',
    'fastapi~=0.115.5',
    'uvicorn[standard]~=0.19.0',
    'pydantic~=2.0',
    'starlette-graphene3~=0.6.0',
    'graphene~=3.0',
    'python-dateutil~=2.0',
    'lark~=0.11.0',
]

[project.urls]
Source = 'https://github.com/aiidateam/aiida-restapi'

[project.optional-dependencies]
auth = [
    'python-jose',
    'python-multipart',
    'passlib',
]
docs = [
    'sphinx',
    'myst-parser[linkify]>=0.13.7',
    'sphinx-external-toc',
    'sphinx-book-theme',
    'sphinx-panels',
    'pygments-graphql',
]
pre-commit = [
    'pre-commit~=2.12'
]
testing = [
    'aiida-restapi[auth]',
    'pgtest~=1.3.1',
    'wheel~=0.31',
    'coverage',
    'pytest~=6.2',
    'pytest-regressions',
    'pytest-cov',
    'requests',
    'httpx',
]

[tool.flit.module]
name = 'aiida_restapi'

[tool.flit.sdist]
exclude = [
    '.github/',
    'docs/',
    'examples/',
    'tests/',
    '.coveragerc',
    '.gitignore',
    '.pre-commit-config.yaml',
    '.readthedocs.yml',
    'codecov.yml',
]

[tool.ruff]
line-length = 120

[tool.ruff.format]
quote-style = 'single'

[tool.ruff.lint]
ignore = [
  'F403',  # Star imports unable to detect undefined names
  'F405',  # Import may be undefined or defined from star imports
  'PLR0911',  # Too many return statements
  'PLR0912',  # Too many branches
  'PLR0913',  # Too many arguments in function definition
  'PLR0915',  # Too many statements
  'PLR2004',  # Magic value used in comparison
  'RUF005',  # Consider iterable unpacking instead of concatenation
  'RUF012',  # Mutable class attributes should be annotated with `typing.ClassVar`
]
select = [
  'E',  # pydocstyle
  'W',  # pydocstyle
  'F',  # pyflakes
  'I',  # isort
  'PLC',  # pylint-convention
  'PLE',  # pylint-error
  'PLR',  # pylint-refactor
  'PLW',  # pylint-warning
  'RUF'  # ruff
]

[tool.pytest.ini_options]
python_files = 'test_*.py example_*.py'
filterwarnings = [
    'ignore:Creating AiiDA configuration folder.*:UserWarning',
    'ignore::DeprecationWarning:aiida:',
    'ignore::DeprecationWarning:plumpy:',
    'ignore::DeprecationWarning:django:',
    'ignore::DeprecationWarning:yaml:',
]

[tool.mypy]
show_error_codes = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_unused_ignores = true
warn_redundant_casts = true
no_implicit_optional = true
strict_equality = true
plugins = ['pydantic.mypy']

[[tool.pydantic.mypy.overrides]]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = false

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    py38
    py311

[testenv]
usedevelop = true

[testenv:py{38,39,310,311}]
description =
    py38: Installs test dependencies and runs tests using python 3.8
    py39: Installs test dependencies and runs tests using python 3.9
    py310: Installs test dependencies and runs tests using python 3.10
    py311: Installs test dependencies and runs tests using python 3.11
extras =
    auth
    testing
    docs
deps = black
commands = pytest {posargs}

# to get started with doing live testing
# first create a database folder {toxinidir}/.tox/.aiida/database
# and run `initdb` in it, then start the postgres server: pg_ctl -D database -l logfile start
# now you can run `tox -e verdi quicksetup`, then `tox -e serve`

[testenv:verdi]
description =
    Runs a verdi command within a tox environment that sets the AIIDA_PATH
setenv =
    AIIDA_PATH = {toxinidir}/.tox/.aiida
commands = verdi {posargs}

[testenv:serve]
description =
    Start the web API server within a tox environment that sets the AIIDA_PATH
extras =
    auth
setenv =
    AIIDA_PATH = {toxinidir}/.tox/.aiida
commands = uvicorn aiida_restapi:app {posargs:--reload}

[testenv:docs-{update,clean}]
description =
    docs-clean: Build the documentation (remove any existing build)
    docs-update: Build the documentation (modify any existing build)
extras =
    auth
    docs
whitelist_externals =
    rm
    echo
commands =
    clean: rm -rf docs/_build
    sphinx-build -nW --keep-going -b {posargs:html} docs/source/ docs/_build/{posargs:html}
commands_post = echo "open file://{toxinidir}/docs/_build/{posargs:html}/index.html"
"""
